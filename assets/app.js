angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","$location","$window","UserSvc",function(t,e,n,o){if(t.$on("login",function(n,o){t.currentUser=o,e.path("/")}),t.logout=function(){delete t.currentUser,e.path("/"),window.sessionStorage.removeItem("token")},o.isLoggedIn()){o.getUser().then(function(e){t.currentUser=e})}}]),angular.module("app").controller("AskCtrl",["$scope","QuestSvc",function(t,e){t.addQuestion=function(){t.postBody&&e.create({username:t.currentUser.username,body:t.postBody}).success(function(e){t.questions.unshift(e),t.postBody=null})},e.fetch().success(function(e){t.questions=e})}]),angular.module("app").controller("EditCtrl",["$scope","EditSvc","$location","$routeParams",function(t,e,n,o){e.fetchById(o.ansId).then(function(e){console.log(e.data),t.answer=e.data,t.answerTitle=e.data.title,t.answerBody=e.data.body}),t.saveEdit=function(){e.updateById({id:o.ansId,body:t.answerBody}).then(function(){n.path("/questions/"+t.answer.questionId)})},t.discard=function(){n.path("/questions/"+t.answer.questionId)}}]),angular.module("app").service("EditSvc",["$http",function(t){this.fetchById=function(e){return t.get("/api/questions/edit/"+e)},this.updateById=function(e){return t.put("/api/questions/edit/submit",e)}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){t.errorMsg="",e.login(n,o).then(function(e){t.$emit("login",e)},function(){t.errorMsg="Incorrect username/password."})}}]),angular.module("app").controller("QuestCtrl",["$scope","QuestSvc","$location",function(t,e,n){t.addQuestion=function(){t.postBody&&e.create({username:t.currentUser.username,title:t.title,body:t.postBody,answersCount:0,votes:0}).success(function(e){t.questions.unshift(e),t.postBody=null,n.path("/")})},t.upvoteQuestion=function(n){e.up({type:"Question",id:t.questions[n]._id}).then(function(e){t.questions[n]=e.data})},t.downvoteQuestion=function(n){e.down({type:"Question",id:t.questions[n]._id}).then(function(e){t.questions[n]=e.data})},t.askQuestionView=function(){n.path("/ask")},e.fetch().success(function(e){t.questions=e}),t.getQuestionById=function(n){e.fetchById(n).then(function(e){t.quest=e})}}]),angular.module("app").service("QuestSvc",["$http",function(t){this.fetch=function(){return t.get("/api/questions")},this.fetchById=function(e){return t.get("/api/questions/"+e)},this.create=function(e){return t.post("/api/questions",e)},this.up=function(e){return t.put("/api/questions/up/",e)},this.down=function(e){return t.put("/api/questions/down/",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o){e.register(n,o).then(function(e){t.$emit("login",e)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"QuestCtrl",templateUrl:"/templates/questions.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/ask",{controller:"QuestCtrl",templateUrl:"/templates/ask.html"}).when("/questions/:questId",{controller:"SingleQuestCtrl",templateUrl:"/templates/quest.html"}).when("/answer/edit/:ansId",{controller:"EditCtrl",templateUrl:"/templates/edit.html"})}]),angular.module("app").controller("SingleQuestCtrl",["$scope","$routeParams","SingleQuestSvc","$location",function(t,e,n){n.fetchById(e.questId).then(function(e){t.quest=e.data}),t.answerBody="",t.addAnswer=function(){t.answerBody&&(n.postAnswer({username:t.currentUser.username,questionId:e.questId,body:t.answerBody}).then(function(e){t.answers.push(e.data)}),t.answerBody="")},t.upvoteAnswer=function(e){n.up({type:"Answer",id:t.answers[e]._id}).then(function(n){t.answers[e]=n.data})},t.downvoteAnswer=function(e){n.down({type:"Answer",id:t.answers[e]._id}).then(function(n){t.answers[e]=n.data})},n.fetchAnswers(e.questId).then(function(e){t.answers=e.data})}]),angular.module("app").service("SingleQuestSvc",["$http",function(t){this.fetchById=function(e){return t.get("/api/questions/"+e)},this.postAnswer=function(e){return t.post("/api/questions/answer",e)},this.fetchAnswers=function(e){return t.get("/api/questions/answer/"+e)},this.up=function(e){return t.put("/api/questions/up/",e)},this.down=function(e){return t.put("/api/questions/down/",e)}}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return window.sessionStorage.token=n.data,t.defaults.headers.common["x-auth"]=n.data,e.getUser()})},e.register=function(n,o){return t.post("/api/users",{username:n,password:o}).then(function(){return e.login(n,o)})},e.isLoggedIn=function(){var e=!1;return window.sessionStorage.token&&(t.defaults.headers.common["x-auth"]=window.sessionStorage.token,e=!0),e}}]);
//# sourceMappingURL=data:application/json;base64,