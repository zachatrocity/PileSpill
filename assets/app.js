angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","$location","$window","UserSvc",function(e,t,n,o){if(e.$on("login",function(n,o){e.currentUser=o,t.path("/")}),e.logout=function(){delete e.currentUser,t.path("/"),window.sessionStorage.removeItem("token")},o.isLoggedIn()){o.getUser().then(function(t){e.currentUser=t})}}]),angular.module("app").controller("AskCtrl",["$scope","QuestSvc",function(e,t){e.addQuestion=function(){e.postBody&&t.create({username:e.currentUser.username,body:e.postBody}).success(function(t){e.questions.unshift(t),e.postBody=null})},t.fetch().success(function(t){e.questions=t})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(e,t){e.login=function(n,o){e.errorMsg="",t.login(n,o).then(function(t){e.$emit("login",t)},function(){e.errorMsg="Incorrect username/password."})}}]),angular.module("app").controller("QuestCtrl",["$scope","QuestSvc","$location",function(e,t,n){e.addQuestion=function(){e.postBody&&t.create({username:e.currentUser.username,title:e.title,body:e.postBody,answersCount:0,upvote:0,downvote:0}).success(function(t){e.questions.unshift(t),e.postBody=null,n.path("/")})},e.askQuestionView=function(){n.path("/ask")},t.fetch().success(function(t){e.questions=t}),e.getQuestionById=function(n){t.fetchById(n).then(function(t){e.quest=t})},e.addAnswer=function(){console.log("answering")}}]),angular.module("app").service("QuestSvc",["$http",function(e){this.fetch=function(){return e.get("/api/quests")},this.fetchById=function(t){return e.get("/api/quests/"+t)},this.create=function(t){return e.post("/api/quests",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(e,t){e.register=function(n,o){t.register(n,o).then(function(t){e.$emit("login",t)})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"QuestCtrl",templateUrl:"/templates/questions.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/ask",{controller:"QuestCtrl",templateUrl:"/templates/ask.html"}).when("/quest/:questId",{controller:"SingleQuestCtrl",templateUrl:"/templates/quest.html"})}]),angular.module("app").controller("SingleQuestCtrl",["$scope","$routeParams","SingleQuestSvc","$location",function(e,t,n){n.fetchById(t.questId).then(function(t){console.log(t),e.quest=t.data}),e.addAnswer=function(){console.log("answering")}}]),angular.module("app").service("SingleQuestSvc",["$http",function(e){this.fetchById=function(t){return e.get("/api/quests/"+t)}}]),angular.module("app").service("UserSvc",["$http",function(e){var t=this;t.getUser=function(){return e.get("/api/users").then(function(e){return e.data})},t.login=function(n,o){return e.post("/api/sessions",{username:n,password:o}).then(function(n){return window.sessionStorage.token=n.data,e.defaults.headers.common["x-auth"]=n.data,t.getUser()})},t.register=function(n,o){return e.post("/api/users",{username:n,password:o}).then(function(){return t.login(n,o)})},t.isLoggedIn=function(){var t=!1;return window.sessionStorage.token&&(e.defaults.headers.common["x-auth"]=window.sessionStorage.token,t=!0),t}}]);
//# sourceMappingURL=data:application/json;base64,